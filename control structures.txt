COBOL has some similar and some different control structures to c or java. However, the program structure is very different. Each COBOL program consists of 4 divisions. Divisions are specific areas of the program that contain information unique to each devision. The 4 devisions are the Identification Division, Environment Division, Data Division, and Procedure Division. 

The Identification Division is the only mandatory division. It contains the paragraph PROGRAM-ID which is the only mandatory paragraph. PROGRAM-ID specifies the program name that can be 1 to 30 characters. 

The Environment Division is used to specify input and output files to the program. It consists of two sections. The Configuration section which provides information about the system on which the program is written and executed. And the Input-Output section. this section provides information about the files to be used in the program. 

The Data Division is used to define the variables used in the program. It consists of four sections. The File section, the Working-Storage section, the Local-Storage section and the Linkage section. The file section is used to define the record structure of the file. The Working-Storage section and the Local-Storage section are used to declare variables. the difference between the two sections is that variables in the Local-Storage section are initialized every time the program starts execution. The Linkage section is used to describe the data names that are received from an external program.

The Procedure division where the program possesses the variables it defined in the data devision. It includes the logic and control structures of the program. 

COBOL uses conditional statements in a similar way to modern programing languages. There is an if statement that tests a conditional and performs a block of code depending on the result of the conditional statement. There are several conditions an if statement can test. The most familiar is the relation condition. This includes things such as test for equality, less than, and greater than. For numbers, relation conditions are calculated algebraically. For non-numeric operands, relation conditions are determined by the number of characters in each operand. In addition to the relation condition is the sign condition. It only test numeric operands and test if they are positive, negative, or zero. Class conditions test if an operand is a number or alphabetic. Negation of a condition is performed with the "NOT" keyword. Conditions can be combined with the "AND" and "OR" logical operators.

There is an additional type of condition called condition-name condition. It is a condition that is defined by the programmer. It is defined in the data division as a subordinate to another data item. It is defined with a name and a set of values. It can be used in an if statement by simply writing "IF <NAME>" where <NAME> is the name of the condition-name condition. It is evaluated by checking the value of the data item the condition is subordinate to against the values defined in the condition.

Loops are performed with the perform statement. Perform statement can be written in 4 ways and they always reference a paragraph to loop. Paragraphs are subsets of code that include at least one sentence. A sentence is a set of statements. Paragraphs when referenced by a perform statement act like labels of a goto statement. The first perform statement is perform thru. It specifies 2 paragraphs and runs code from the first paragraph specified thru to the last paragraph specified. Perform until behaves similarly to a while loop. It loops on a specified paragraph until a condition is met. Perform times performs a paragraph a set number of times. The last perform statement is perform varying. Perform varying behaves like a for loop. It includes a variable, a start value, an increment amount and an end condition. It loops on the paragraph and increments the variable until the variable has met the condition.

COBOL make use of subroutines. There are two types of subroutines. Perform statements are actual Internal subroutines. There are also external subroutines that use the CALL verb. They behave similarly to functions and function calls. Variables to external subroutines can be called by reference or called by content. If a variable is called by reference and it's value is changed, the value will also be changed in the program that called the subroutine. External subroutines are called by reference by default. If a variable is called by content and the value is changed then the change will not also occur in the program that called the subroutine. 